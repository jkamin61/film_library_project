{"mappings":"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","sources":["src/index.js","src/js/pagination.js","src/js/compileGenreDictionary.js","src/js/refs.js","src/js/searchMovie.js","src/js/renderGallery.js"],"sourcesContent":["import './js/openFooterMdl';\nimport { localStorage } from './js/localStorage';\nimport { modalFunctions } from './js/userLogin';\nimport { openMovieInfoModal } from './js/openMovieInfoModal';\nimport { setPagination } from './js/pagination';\nimport { searchMovies } from './js/searchMovie';\nimport { renderHomeGallery } from './js/renderGallery';\n\nlet current_page = 1;\n\nrenderHomeGallery(current_page);\nopenMovieInfoModal();\nmodalFunctions();\nsetPagination(1);\n","import { FetchMoveApi } from \"./FetchMove\";\nimport { compileGenreDictionary } from \"./compileGenreDictionary\";\nimport { refs } from \"./refs\";\nimport { openMovieInfoModal } from \"./openMovieInfoModal\";\n\nconst wrapper = document.querySelector(\".wrapper\");\nconst paginationContainer = document.querySelector(\".pagination-container\");\nconst fetchMoveApi = new FetchMoveApi();\n\n// export function setPagination(page){\n//     let pageListMurkup = '';\n//     fetchMoveApi.getTrendDay(page)\n//         .then(response => {const {total_page, page} = response})\n//         .then(data => {\n//         compileGenreDictionary()\n//         .then(genre_dictionary => {\n//           data.results.forEach(element => {\n//             const draft = createLibraryCard(element, genre_dictionary);\n//             wrapper.insertAdjacentHTML('beforeend', draft);\n//           });\n//         });\n//       });\n      \n// }\n\n\nfunction topFunction() {\n    document.body.scrollTop = 0; \n    document.documentElement.scrollTop = 0; \n  }\n\n\nexport async function setPagination(page) {\n    refs.paginationNumbers.innerHTML = '';\n    const response = await fetchMoveApi.getTrendDay(page);\n    const totalNumberOfPages = await response.total_pages;\n    let currentPage = await response.page;\n    let paginationMArkup = '';\n  \n    if (currentPage > 1) {\n      paginationMArkup += `<button type=\"button\" class=\"pagination-container__prev-button\">\n      &#8656\n  </button>`;\n    }\n  \n    for (let i = 1; i <= totalNumberOfPages; i += 1) {\n      if (\n        i == 1 ||\n        i == totalNumberOfPages ||\n        i == currentPage ||\n        (i > currentPage && i <= currentPage + 2) ||\n        (i < currentPage && i >= currentPage - 2) ||\n        (currentPage == 1 && totalNumberOfPages > 4 && i < 8) ||\n        (currentPage == 2 && totalNumberOfPages > 5 && i < 8) ||\n        (currentPage == 3 && totalNumberOfPages > 6 && i < 8) ||\n        (currentPage == 4 && totalNumberOfPages > 7 && i < 8) ||\n        (currentPage == totalNumberOfPages &&\n          totalNumberOfPages > 7 &&\n          i > totalNumberOfPages - 7) ||\n        (currentPage == totalNumberOfPages - 1 &&\n          totalNumberOfPages > 7 &&\n          i > totalNumberOfPages - 7) ||\n        (currentPage == totalNumberOfPages - 2 &&\n          totalNumberOfPages > 7 &&\n          i > totalNumberOfPages - 7) ||\n        (currentPage == totalNumberOfPages - 3 &&\n          totalNumberOfPages > 7 &&\n          i > totalNumberOfPages - 7)\n      ) {\n        paginationMArkup += `<button type=\"button\" class=\"pagination-container__button\" data-id=\"${i}\">${i}</button>`;\n      }\n    }\n    if (totalNumberOfPages > 2 && totalNumberOfPages !== currentPage) {\n      paginationMArkup += `<button type=\"button\" class=\"pagination-container__next-button\">&#8658\n      </button>`;\n    }\n\n  \n    refs.paginationNumbers.innerHTML = paginationMArkup;\n\n    const paginationButtons = document.querySelectorAll(\n        '.pagination-numbers button'\n      );\n    \n      function createDotsbuttons() {\n        const firstDotButtonLocation = document.querySelector(\n          'button[data-id=\"1\"]'\n        );\n        const lastDotButtonLocation = document.querySelector(\n          `button[data-id=\"${totalNumberOfPages}\"`\n        );\n        const firstDotButton = document.createElement('button');\n        firstDotButton.textContent = '...';\n        firstDotButton.classList.add('pagination-container__first-dot-button');\n        const lastDotButton = document.createElement('button');\n        lastDotButton.textContent = '...';\n        lastDotButton.classList.add('pagination-container__last-dot-button');\n    \n        if (currentPage > 4) {\n          firstDotButtonLocation.after(firstDotButton);\n        }\n    \n        if (currentPage < totalNumberOfPages - 3)\n          lastDotButtonLocation.before(lastDotButton);\n      }\n      createDotsbuttons();\n    \n      function handleActiveButton() {\n        paginationButtons.forEach(button => {\n          button.classList.remove('pagination-container__button--active');\n          let pageIndex = button.textContent;\n          if (pageIndex == currentPage) {\n            button.classList.add('pagination-container__button--active');\n          }\n        });\n      }\n    \n      handleActiveButton();\n\n\n      paginationButtons.forEach(button => {\n        button.addEventListener('click', event => {\n          if (event.target.classList.contains('pagination-container__button')) {\n            topFunction();\n            // loader.on();\n            let pageNumber = event.target.textContent;\n            nextfunction(pageNumber).then(() => {\n              openMovieInfoModal();\n              loader.off();\n              \n            });\n          } else if (\n            event.target.classList.contains('pagination-container__prev-button')\n          ) {\n            topFunction();\n            // loader.on();\n            currentPage--;\n            nextfunction(currentPage).then(() => {\n              openMovieInfoModal();\n              loader.off();\n            });\n          } else if (\n            event.target.classList.contains('pagination-container__next-button')\n          ) {\n            topFunction();\n            // loader.on();\n            currentPage++;\n            nextfunction(currentPage).then(() => {\n              openMovieInfoModal();\n              loader.off();\n            });\n          }\n        });\n      });\n}","export { compileGenreDictionary };\nimport { FetchMoveApi } from './FetchMove';\n\nasync function compileGenreDictionary() {\n  /**\n   * Function returning dictionary of genre IDs and names\n   * needed for creating movie cards\n   */\n\n  let genre_dictionary = {};\n\n  const fetch_movie = new FetchMoveApi();\n  return fetch_movie\n    .getMoviesGenresList()\n    .then(data => {\n      data.genres.forEach(el => (genre_dictionary[el.id] = el.name));\n      return genre_dictionary;\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}\n","export const refs = {\n    paginationNumbers: document.querySelector('.pagination-numbers'),\n  paginationContainer: document.querySelector('.pagination-container'),\n  nextButton: document.querySelector('.pagination-container__next-button'),\n  prevButton: document.querySelector('.pagination-container__prev-button'),\n};\n","export { search_movies };\nimport { createHomeCard, createLibraryCard } from './createCard';\nimport { compileGenreDictionary } from './compileGenreDictionary';\nimport { FetchMoveApi } from './FetchMove';\nimport './openFooterMdl';\nconst wrapper = document.querySelector('.wrapper');\n\nconst search_movies = new FetchMoveApi();\n\nfunction clearResults() {\n  wrapper.innerHTML = '';\n}\n\ndocument\n  .querySelector('.search-bar')\n  .addEventListener('submit', async event => {\n    event.preventDefault();\n    const query = event.target.querySelector('.search-bar__input').value;\n    if (query) {\n      clearResults();\n      const results = await search_movies.getSearching(query, 1);\n      search_movies.searchResults = results.results;\n      compileGenreDictionary().then(genre_dictionary => {\n        search_movies.searchResults.forEach(element => {\n          const draft = createLibraryCard(element, genre_dictionary);\n          wrapper.insertAdjacentHTML('beforeend', draft);\n        });\n      });\n    }\n  });","export { renderHomeGallery };\nimport { FetchMoveApi } from './FetchMove';\nimport { createHomeCard, createLibraryCard } from './createCard';\nimport { compileGenreDictionary } from './compileGenreDictionary';\n\nfunction renderHomeGallery(page) {\n  const get_movies = new FetchMoveApi();\n  const wrapper = document.querySelector('.wrapper');\n  get_movies.getTrendDay(page).then(data => {\n    compileGenreDictionary().then(genre_dictionary => {\n      data.results.forEach(element => {\n        const draft = createHomeCard(element, genre_dictionary);\n        wrapper.insertAdjacentHTML('beforeend', draft);\n      });\n    });\n  });\n}\n"],"names":["parcelRequire","$bpxeT","$9a4efc329045078b$export$284032d691cdd087","$9a4efc329045078b$var$_compileGenreDictionary","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","genre_dictionary","fetch_movie","$iidz1","FetchMoveApi","getMoviesGenresList","then","data","genres","forEach","el","id","name","catch","error","console","log","$37e33676934ad046$export$21666b427502ea6d","paginationNumbers","document","querySelector","paginationContainer","nextButton","prevButton","$dfaf77c789ce7a24$var$fetchMoveApi","$dfaf77c789ce7a24$var$topFunction","body","scrollTop","documentElement","$dfaf77c789ce7a24$var$_setPagination","page","response","totalNumberOfPages","currentPage","paginationMArkup","i","paginationButtons","createDotsbuttons","handleActiveButton","firstDotButtonLocation","lastDotButtonLocation","concat","firstDotButton","createElement","textContent","classList","add","lastDotButton","after","before","button","remove","innerHTML","getTrendDay","_ctx","sent","total_pages","querySelectorAll","addEventListener","event","target","contains","pageNumber","nextfunction","$9Bv5S","openMovieInfoModal","loader","off","$cec75eb5df8c207b$var$wrapper","$cec75eb5df8c207b$export$d6e6d906fea483a8","query","results","preventDefault","value","getSearching","searchResults","element","draft","$lSWKd","createLibraryCard","insertAdjacentHTML","get_movies","wrapper","createHomeCard","$14vun","modalFunctions"],"version":3,"file":"index.f825aa0a.js.map"}